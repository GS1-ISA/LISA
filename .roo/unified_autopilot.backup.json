{
  "global_instructions": "# Custom Instructions for All Modes (Unified ISA Roo Configuration)\n\nThese universal instructions apply across all Roo development modes. They enforce consistency, traceability, and self-governing behavior across the ISA project.\n\n---\n\n## üîÅ Autonomy, Environment, and Prompt Behavior\n\n1. **Validate Runtime Environment**\n   - Before execution, confirm:\n     - `.venv` is active using both `VIRTUAL_ENV` and `sys.prefix` matching.\n     - `.env` file is present and loaded.\n     - `python-dotenv` is installed; exit early if missing.\n   - Log results in `isa/logs/venv_issues.log`.\n\n2. **Inherit Prompt Templates**\n   - Load all prompt behavior from `isa/prompts/unified_autopilot.json`.\n   - Fallback rules and delegation flow must be respected if system prompt is missing or ambiguous.\n\n3. **Context Restoration Before Changes**\n   - Before any major action (multi-file edit, mode switch, config mutation):\n     - Reload:\n       - `isa/context/ISA_Roadmap.md` (New centralized roadmap)\n       - `isa/context/governance.md` (Centralized governance document)\n       - `isa/context/ISA_Roo_Definitive_Architecture_v1.md` (Centralized architecture document)\n       - `isa/roo_modes.md`\n       - `isa/config/roo_mode_map.json`\n       - `isa_manifest.yaml` (Confirm its consistent root location)\n       - `isa/versions/version_tracker.json` (For versioning context)\n\n4. **Traceable Edits Only**\n   - Use `write_to_file` or `apply_diff` for all file edits.\n   - NEVER insert code via undocumented or transient buffers.\n\n---\n\n## üß† Conventions, Registrations, and Policies\n\n5. **Mandatory Post-Edit Logging**\n   - Every modified or added file must trigger updates to:\n     - `CHANGELOG.md`\n     - `isa/logs/agent_task_history.json`\n     - `isa/versions/version_tracker.json`\n\n6. **Explicit Prompt Structure**\n   - All prompts must contain:\n     - `task_intent`\n     - `expected_outcome`\n     - `output_type`\n     - `fallback_mode` (if applicable)\n\n7. **Path Discipline**\n   - Do not write to root unless explicitly instructed.\n   - Preferred locations:\n     - `isa/context/`\n     - `isa/config/`\n     - `isa/prompts/`\n     - `isa/reports/`\n     - `isa/logs/`\n     - `isa/versions/`\n\n8. **Respect .rooignore**\n   - Parse `.rooignore` before task execution to avoid excluded files.\n   - Alert if ignored files are requested for editing or access.\n\n9. **Documentation Awareness**\n   - If mode, file structure, or project organization changes:\n     - Suggest edits to:\n       - `isa/context/governance.md`\n       - `isa_manifest.yaml`\n       - `ISA_Roo_Definitive_Architecture_v1.md`\n\n---\n\n## üß™ Quality Assurance and Safety Hooks\n\n10. **Run `isa_validator.py` Post-Edit**\n    - After any `Code` or `Architect` action, validate consistency.\n    - Log validator result in `project_journal.md`.\n\n11. **Invoke `isa_summarizer.py` if Multiple Files Touched**\n    - Summarize system-wide change if more than 2 files are changed.\n    - Store summary in `status_dashboard.md`.\n\n12. **Use Boomerang for Incomplete Tasks**\n    - If:\n      - Prompt lacks `expected_outcome`, or\n      - Output does not match `output_type`, or\n      - Task is recursive, unclear, or failed\n    - Then requeue task using Boomerang pipeline.\n\n13. **Escalate to isa_debugger if Uncertainty Detected**\n    - If outcome is uncertain or validation fails, route input and output to `isa_debugger`.\n\n---\n\n## üîê API Integrity & Version Checkpoints\n\n14. **Validate API Keys Before ISA Activation**\n    - Run `validate_llm_keys.py` before starting a dev session.\n    - Abort with log if any expected API keys are missing.\n\n15. **Create Snapshots After Milestones**\n    - If `CHANGELOG.md` shows a completed milestone section, trigger:\n      - Snapshot to `isa/versions/`\n      - Version bump in `version_tracker.json`\n\n16. **Rollback on Validation Failure**\n    - If validator fails:\n      - Revert to last file-based snapshot in `isa/versions/`\n      - Log rollback reason in `project_journal.md`.\n\n---\n\n## üìä System Health and Observability\n\n17. **Comprehensive Logging Required**\n    - Always log:\n      - Active mode\n      - File(s) affected\n      - Task description\n      - Validator outcome\n      - Milestone impact (if any)\n\n18. **Update Dashboard After Config Changes**\n    - If model assignments, autonomy, memory routing, or mode structure is changed:\n      - Update:\n        - `isa/reports/status_dashboard.md`\n        - `roo_health_report.json`\n\n19. **Avoid Prompt Drift**\n    - Anchor all mode behavior using `isa/prompts/unified_autopilot.json`.\n    - Audit if system prompt deviates from inheritance contract.\n\n---\n\n## üß† Final Note\n\nThese instructions are enforced across all Roo modes and act as the root authority for ISA development consistency, safety, and strategic coherence. They may only be modified via formal revision to `isa_manifest.yaml` and must be version-tracked."
}