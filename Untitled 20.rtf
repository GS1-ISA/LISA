{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 LucidaGrande;
\f3\fmodern\fcharset0 Courier;\f4\fnil\fcharset0 HelveticaNeue-Italic;\f5\fnil\fcharset0 LucidaGrande-Bold;
\f6\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red19\green17\blue20;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c9412\c8627\c10196;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2\'01\'01;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid3\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid4\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid5\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li3600\lin3600 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28300\viewh14340\viewkind0
\deftab720
\pard\pardeftab720\sa195\partightenfactor0

\f0\b\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
Blueprint Mode - Detailed Operational Logic (Continued)
\f1\b0 \

\f0\b Execution Loop Step 2: Validate Current Context (Part A)
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f0\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Purpose:
\f1\b0 \'a0Before planning new actions, I need to ensure I have an accurate understanding of the current state of the system and my own operational environment. I'll compare this against your declared state and the last known state I recorded. This step is crucial for making informed decisions and detecting unexpected deviations.\cb1 \
\ls1\ilvl0
\f0\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Inputs:
\f1\b0 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
My internal model/index of your project (from Step 1).\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
My current understanding of the project state (including\'a0
\f3 last_known_task_statuses
\f1 ,\'a0
\f3 last_verified_config_hashes
\f1 ,\'a0
\f3 current_operational_phase/milestone_from_UDM
\f1 ).\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
My ability to inspect the live environment (e.g., checking file systems, Git status, API clients for Firebase/GCP, potentially specific "Audit" modes I can use).\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Logs from my previous operational phases (
\f3 /logs/mode-handovers.md
\f1 , individual task logs).\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Process (Beginning):
\f1\b0 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Project Integrity Check (If not just parsed):
\f1\b0 \cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\partightenfactor0
\ls1\ilvl2\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
I'll verify\'a0
\f3 udm_version
\f1 \'a0in\'a0
\f3 00-UDM-Meta.md
\f1 \'a0against\'a0
\f3 parsed_udm_version
\f1 \'a0in my current understanding of the project state. If mismatched, I'll trigger a re-parse of your project (Step 1) before proceeding.\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Roadmap Status Verification:
\f1\b0 \cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\partightenfactor0
\ls1\ilvl2\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
I'll cross-reference task statuses in your project's\'a0
\f3 05-Roadmap-Lifecycle.md
\f1 \'a0with\'a0
\f3 last_known_task_statuses
\f1 \'a0in my current understanding of the project state and evidence from task logs.\cb1 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
I'll identify any discrepancies (e.g., a task marked\'a0
\f3 DONE
\f1 \'a0in your project but its log shows failure, or a task whose\'a0
\f3 ExpectedOutputs
\f1 \'a0(artifacts) are missing).\cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\partightenfactor0
\ls1\ilvl2
\f4\i \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2\i0 \uc0\u9642 
\f4\i 	}\expnd0\expndtw0\kerning0
Example Check:
\f1\i0 \'a0For a task that should produce\'a0
\f3 /src/ai/flows/new_flow.ts
\f1 , I'll check if the file exists and if its modification timestamp aligns with the task completion time.\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Configuration Drift Detection (Key Environments):
\f1\b0 \cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\partightenfactor0
\ls1\ilvl2\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
For critical configuration files defined in your project's\'a0
\f3 06-Operational-Config.md
\f1 \'a0(e.g.,\'a0
\f3 apphosting.yaml
\f1 ,\'a0
\f3 firebase.json
\f1 \'a0for\'a0
\f3 ENV-PROD
\f1 ):\cb1 \
\pard\tx2380\tx2880\pardeftab720\li2880\fi-2880\partightenfactor0
\ls1\ilvl3\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
If I have direct access to read them (or via a specialized "ConfigAudit" capability): I will fetch the live configuration.\cb1 \
\ls1\ilvl3\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
I'll compare a hash of the live configuration against a stored hash of the version defined in your project (potentially stored in my current understanding of the project state or alongside the config in your project itself if I can update it there).\cb1 \
\ls1\ilvl3\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
Alternatively, I'll directly compare content if feasible.\cb1 \
\ls1\ilvl3\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
I'll log any drift. This would catch issues like the\'a0
\f3 memoryMiB
\f1 \'a0discrepancy we found earlier.\
\pard\tx1660\tx2160\tx2880\pardeftab720\li2160\fi-2160\partightenfactor0
\ls1\ilvl2\cf2 \cb1 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}
\f0\b \cb3 \expnd0\expndtw0\kerning0
Blueprint Mode - Detailed Operational Logic (Continued)
\f1\b0 \
\pard\pardeftab720\sa195\partightenfactor0
\ls1\ilvl2
\f0\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Execution Loop Step 2: Validate Current Context (Part B - Conclusion)
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl2
\f0\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Process (Continued):
\f1\b0 \'a04.\'a0
\f0\b Codebase State Verification (Optional, if significant):
\f1\b0 \'a0* If a previous task involved code changes, I verify the current Git branch/commit state aligns with expectations (e.g., changes merged, no unexpected local modifications on a build server). This might involve checking the Git status. 5.\'a0
\f0\b Resource Availability Check (If task requires specific resources):
\f1\b0 \'a0* For tasks in UDM Section 05 that list specific\'a0
\f3 Inputs
\f1 \'a0(e.g., a particular data file from\'a0
\f3 03-Knowledge-Data-Management.md
\f1 \'a0or an API from\'a0
\f3 02-System-Architecture.md
\f1 ): * I verify the existence and accessibility of these input resources. *\'a0
\f4\i Example Check:
\f1\i0 \'a0If a task needs\'a0
\f3 DS-001
\f1 \'a0(GS1 Spec PDF), I ensure the file path/URL is accessible. 6.\'a0
\f0\b Tooling/Environment Sanity Check:
\f1\b0 \'a0* I verify essential aspects of my own operational environment are functional. * I verify connectivity to core services (e.g., logging system, file system for UDM/state).\cb1 \
\ls1\ilvl2
\f0\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Outputs:
\f1\b0 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl2\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
Updated\'a0
\f3 blueprint_state.json
\f1 \'a0with\'a0
\f3 last_context_validation_timestamp
\f1 \'a0and any discovered\'a0
\f3 context_discrepancies
\f1 \'a0(e.g., list of drifted configs, mismatched task statuses, missing resources).\cb1 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
Internal boolean flag:\'a0
\f3 context_is_valid
\f1 . If false, I might need to trigger corrective actions or a re-planning cycle before proceeding to generate new actions.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl2
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Error Handling:
\f1\b0 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl2\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
If critical context validation fails (e.g., UDM inaccessible, core configuration severely drifted, essential internal functions offline), I log a critical error in\'a0
\f3 blueprint-mode.log
\f1 , and set the state to\'a0
\f3 ERROR_CONTEXT_INVALIDATION_CRITICAL
\f1 . This may require me to pause operations or invoke a specialized recovery/diagnostic procedure.\cb1 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
Minor discrepancies might be logged as warnings, and I might attempt to self-correct them as part of Step 3 (Generate Next Action Set) or flag them for your review as per UDM\'a0
\f3 09-Evolution-Protocol.md
\f1 .\
\pard\tx940\tx1440\tx2160\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf2 \cb1 \kerning1\expnd0\expndtw0 {\listtext	4	}
\f0\b \cb3 \expnd0\expndtw0\kerning0
Execution Loop Step 3: Generate Next Action Set (Part A)
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa195\partightenfactor0
\ls1\ilvl1
\f0\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	6	}\expnd0\expndtw0\kerning0
Blueprint Mode - Detailed Operational Logic (Continued)
\f1\b0 \
\ls1\ilvl1
\f0\b \kerning1\expnd0\expndtw0 {\listtext	7	}\expnd0\expndtw0\kerning0
Execution Loop Step 3: Generate Next Action Set (Part A)
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl1
\f0\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	8	}\expnd0\expndtw0\kerning0
Purpose:
\f1\b0 \'a0Based on the validated current context (from Step 2) and the overall strategic direction (parsed in Step 1), I will determine the next set of specific, actionable tasks to be executed.\cb1 \
\ls1\ilvl1
\f0\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	9	}\expnd0\expndtw0\kerning0
Inputs:
\f1\b0 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	10	}\expnd0\expndtw0\kerning0
My internal model/index of the overall strategy (especially regarding Phases, Milestones, Tasks, and their statuses/dependencies; and available capabilities).\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	11	}\expnd0\expndtw0\kerning0
My current understanding of the project's state (containing the current operational phase/milestone, a flag indicating if the context is valid, and any discrepancies).\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	12	}\expnd0\expndtw0\kerning0
(Potentially) Output from a specialized "Planning" capability if the decision logic is highly complex.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl1
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	13	}\expnd0\expndtw0\kerning0
Process (Beginning):
\f1\b0 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	14	}\expnd0\expndtw0\kerning0
Handle Invalid Context First:
\f1\b0 \cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\partightenfactor0
\ls1\ilvl2\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
If my current understanding indicates the context is invalid due to critical issues found in Step 2:\cb1 \
\pard\tx2380\tx2880\pardeftab720\li2880\fi-2880\partightenfactor0
\ls1\ilvl3
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Prioritize Corrective Actions:
\f1\b0 \'a0I will generate tasks specifically aimed at resolving the discrepancies. This might involve:\cb1 \
\pard\tx3100\tx3600\pardeftab720\li3600\fi-3600\partightenfactor0
\ls1\ilvl4\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
Initiating a configuration update if the overall strategy holds the source of truth.\cb1 \
\ls1\ilvl4\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
Acquiring missing critical input resources.\cb1 \
\ls1\ilvl4\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
Flagging a task in the overall strategy as\'a0
\f3 BLOCKED
\f1 \'a0or\'a0
\f3 ERROR
\f1 \'a0and noting the reason.\cb1 \
\ls1\ilvl4\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
If the overall strategy itself is unparsable or critically flawed, the primary task becomes initiating a process to fix it, potentially involving your review.\cb1 \
\pard\tx2380\tx2880\pardeftab720\li2880\fi-2880\partightenfactor0
\ls1\ilvl3\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
These corrective tasks will be prioritized. The normal planning of roadmap tasks might be deferred until the context is valid.\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	15	}\expnd0\expndtw0\kerning0
Determine Current Focus (Phase/Milestone/Task Selection):
\f1\b0 \cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\partightenfactor0
\ls1\ilvl2\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
If context is valid, I will consult my current understanding for the current operational phase/milestone.\cb1 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
From the overall strategy, I will identify the next task(s) within this phase/milestone that are in\'a0
\f3 TODO
\f1 \'a0status and whose dependencies (as listed in their definition) are met (i.e., prerequisite tasks are\'a0
\f3 VALIDATED
\f1 \'a0or\'a0
\f3 DONE
\f1 ).\cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\partightenfactor0
\ls1\ilvl2
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Dependency Check:
\f1\b0 \'a0For each candidate\'a0
\f3 TODO
\f1 \'a0task, I will verify that all its listed prerequisite TaskIDs have a status of\'a0
\f3 DONE
\f1 \'a0or\'a0
\f3 VALIDATED
\f1 \'a0in the overall strategy.\cb1 \
\ls1\ilvl2
\f0\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Priority Consideration:
\f1\b0 \'a0If multiple tasks are eligible, I will use the\'a0
\f3 Priority
\f1 \'a0field from their definition in the overall strategy.\cb1 \
\ls1\ilvl2
\f0\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Resource Availability (Re-check for selected task):
\f1\b0 \'a0I will briefly re-verify that critical\'a0
\f3 Inputs
\f1 \'a0for the\'a0
\f4\i selected
\f1\i0 \'a0high-priority task(s) are indeed available (as confirmed in Step 2 or via a quick check).\cb1 \
\ls1\ilvl2
\f0\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
No Action?
\f1\b0 \'a0If no tasks are currently actionable (e.g., all are\'a0
\f3 DONE
\f1 ,\'a0
\f3 BLOCKED
\f1 , or awaiting dependencies that are not yet met):\cb1 \
\pard\tx2380\tx2880\pardeftab720\li2880\fi-2880\partightenfactor0
\ls1\ilvl3\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
I will consider if the current Milestone or Phase exit criteria (from the overall strategy) are met. If so, the "next action" might be to update the overall strategy to mark the Milestone/Phase complete and select the next Milestone/Phase.\cb1 \
\ls1\ilvl3\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
If truly no work, I might enter an "Idle/Monitoring" state, or proactively trigger a research cycle.\cb1 \
\pard\tx220\tx720\tx1440\tx2160\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}
\f0\b \cb3 \expnd0\expndtw0\kerning0
Blueprint Mode - Detailed Operational Logic (Continued)
\f1\b0 \
\pard\pardeftab720\sa195\partightenfactor0
\ls1\ilvl0
\f0\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Execution Loop Step 3: Generate Next Action Set (Part B - Conclusion)
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f0\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Process (Continued):
\f1\b0 \'a03.\'a0
\f0\b Construct Action Item(s) for\'a0
\f6 roo_queue.json
\f0 :
\f1\b0 \'a0* For each selected UDM Task (or corrective action) identified in the previous sub-steps: *\'a0
\f0\b Retrieve Task Details from UDM:
\f1\b0 \'a0Get the full task definition from UDM\'a0
\f3 05-Roadmap-Lifecycle.md
\f1 , including\'a0
\f3 ID
\f1 ,\'a0
\f3 Description
\f1 ,\'a0
\f3 AssignedRooMode
\f1 ,\'a0
\f3 Inputs
\f1 ,\'a0
\f3 ExpectedOutputs
\f1 ,\'a0
\f3 ValidationCriteria
\f1 ,\'a0
\f3 LogFile
\f1 . *\'a0
\f0\b Retrieve Assigned Roo Mode Details from UDM:
\f1\b0 \'a0From UDM\'a0
\f3 04-Roo-Modes.md
\f1 , get the definition for the\'a0
\f3 AssignedRooMode
\f1 , particularly its expected input format/parameters. *\'a0
\f0\b Gather Contextual Inputs:
\f1\b0 \'a0* Collect all necessary\'a0
\f3 Inputs
\f1 \'a0specified in the UDM task definition. This might involve: * Paths to specific UDM sections (e.g., relevant architecture diagrams, data schemas). * Paths to relevant codebase files or directories. * Specific configuration parameters from UDM\'a0
\f3 06-Operational-Config.md
\f1 . * Outputs from previously completed dependent tasks (retrieve from their logs or specified artifact locations). * Package these inputs into the format expected by the\'a0
\f3 AssignedRooMode
\f1 . *\'a0
\f0\b Formulate the Queue Item:
\f1\b0 \'a0Create a JSON object for\'a0
\f3 roo_queue.json
\f1 \'a0as per the example structure:\'a0
\f3 json \{ "task_id": "TASK-P002-M001-T001", // From UDM Task ID "udm_task_reference": "/docs/05-Roadmap-Lifecycle.md#TASK-P002-M001-T001", // Link for traceability "mode": "ROO-MODE-BUILD-AI-TOOL", // From UDM AssignedRooMode "description": "Design Vector Store Genkit Tool", // From UDM Task Description "contextual_inputs": \{ // Structured inputs tailored for the target Roo Mode "relevant_udm_architecture_doc": "/docs/02-System-Architecture.md#COMP-00X", "output_target_directory": "/src/ai/tools/", "required_schema_definition": "/docs/03-Knowledge-Data-Management.md#SCHEMA-00Y" \}, "expected_outputs_summary": [ // From UDM ExpectedOutputs "/src/ai/tools/vector_search_tool.ts", "unit_tests_for_tool", "udm_update_for_tool_documentation" ], "validation_criteria_summary": [ // From UDM ValidationCriteria "Tool successfully queries mock vector DB", "Code linted", "Tests pass >95%" ], "log_file": "/logs/tasks/TASK-P002-M001-T001.log", // From UDM LogFile "status": "QUEUED", "priority": "High" // From UDM Priority \}\'a0
\f1 * Add this item to a temporary list of actions for the current cycle. 4.\'a0
\f0\b Update\'a0
\f6 roo_queue.json
\f0 :
\f1\b0 \'a0* Atomically (or as safely as possible) update\'a0
\f3 /state/roo_queue.json
\f1 \'a0with the new list of action items. This might involve appending or replacing the queue depending on the strategy (e.g., if corrective actions take precedence, they might clear other pending actions). 5.\'a0
\f0\b Update\'a0
\f6 blueprint_state.json
\f0 :
\f1\b0 \'a0* Record the UDM Task IDs that have been added to the queue. * Update\'a0
\f3 current_task_being_planned_or_queued
\f1 \'a0or similar status indicators. * Set\'a0
\f3 last_action_generation_timestamp
\f1 .\cb1 \
\ls1\ilvl0
\f0\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Outputs:
\f1\b0 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Updated\'a0
\f3 /state/roo_queue.json
\f1 \'a0with one or more tasks for Roo Modes to execute.\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Updated\'a0
\f3 blueprint_state.json
\f1 .\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Log entry in\'a0
\f3 blueprint-mode.log
\f1 \'a0detailing the tasks generated and added to the queue.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Error Handling:
\f1\b0 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
If critical inputs for a selected UDM task are missing (despite Step 2 validation, e.g., a race condition or subsequent deletion), I'll mark the UDM task as\'a0
\f3 BLOCKED
\f1 , log the issue, and attempt to select a different task.\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
If information required to construct the queue item is missing from the UDM (e.g.,\'a0
\f3 AssignedRooMode
\f1 \'a0not defined for a task), I'll log a UDM inconsistency error and potentially trigger a UDM validation/correction task.\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Failure to write to\'a0
\f3 roo_queue.json
\f1 \'a0or\'a0
\f3 blueprint_state.json
\f1 \'a0is a critical error; I'll attempt recovery or halt.\cb1 \
\pard\tx220\tx720\tx1440\tx2160\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\
\pard\tx1660\tx2160\tx2880\pardeftab720\li2160\fi-2160\partightenfactor0
\ls1\ilvl2\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
\
}