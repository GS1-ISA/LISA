apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-backup-config
  namespace: isa-database
  labels:
    app.kubernetes.io/name: redis-backup
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: backup
data:
  backup.sh: |
    #!/bin/bash
    set -e

    # Configuration
    BACKUP_DIR="/backup"
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    BACKUP_NAME="isa_redis_${TIMESTAMP}"
    RETENTION_DAYS=30

    # Redis connection details
    REDIS_HOST="${REDIS_HOST:-redis}"
    REDIS_PORT="${REDIS_PORT:-6379}"

    echo "Starting Redis backup: ${BACKUP_NAME}"

    # Create backup directory if it doesn't exist
    mkdir -p "${BACKUP_DIR}"

    # Perform Redis backup using redis-cli
    redis-cli \
      -h "${REDIS_HOST}" \
      -p "${REDIS_PORT}" \
      -a "${REDIS_PASSWORD}" \
      --rdb "${BACKUP_DIR}/${BACKUP_NAME}.rdb"

    # Create compressed archive
    tar -czf "${BACKUP_DIR}/${BACKUP_NAME}.tar.gz" \
      -C "${BACKUP_DIR}" \
      "${BACKUP_NAME}.rdb"

    # Remove uncompressed backup
    rm "${BACKUP_DIR}/${BACKUP_NAME}.rdb"

    # Calculate checksum
    sha256sum "${BACKUP_DIR}/${BACKUP_NAME}.tar.gz" > "${BACKUP_DIR}/${BACKUP_NAME}.sha256"

    echo "Backup completed: ${BACKUP_NAME}"

    # Clean up old backups
    find "${BACKUP_DIR}" -name "isa_redis_*.tar.gz" -mtime +${RETENTION_DAYS} -delete
    find "${BACKUP_DIR}" -name "isa_redis_*.sha256" -mtime +${RETENTION_DAYS} -delete

    echo "Cleanup completed"

  restore.sh: |
    #!/bin/bash
    set -e

    # Configuration
    BACKUP_DIR="/backup"
    REDIS_HOST="${REDIS_HOST:-redis}"
    REDIS_PORT="${REDIS_PORT:-6379}"

    if [ -z "$1" ]; then
      echo "Usage: $0 <backup_file>"
      echo "Available backups:"
      ls -la "${BACKUP_DIR}"/isa_redis_*.tar.gz
      exit 1
    fi

    BACKUP_FILE="$1"

    if [ ! -f "${BACKUP_DIR}/${BACKUP_FILE}" ]; then
      echo "Backup file not found: ${BACKUP_DIR}/${BACKUP_FILE}"
      exit 1
    fi

    echo "Starting Redis restore from: ${BACKUP_FILE}"

    # Verify checksum if available
    CHECKSUM_FILE="${BACKUP_DIR}/${BACKUP_FILE%.tar.gz}.sha256"
    if [ -f "${CHECKSUM_FILE}" ]; then
      echo "Verifying backup integrity..."
      cd "${BACKUP_DIR}" && sha256sum -c "${CHECKSUM_FILE}"
    fi

    # Extract backup
    TEMP_DIR=$(mktemp -d)
    tar -xzf "${BACKUP_DIR}/${BACKUP_FILE}" -C "${TEMP_DIR}"

    RDB_FILE="${TEMP_DIR}/$(basename "${BACKUP_FILE}" .tar.gz).rdb"

    # Stop Redis temporarily for restore
    echo "Stopping Redis for restore..."
    redis-cli -h "${REDIS_HOST}" -p "${REDIS_PORT}" -a "${REDIS_PASSWORD}" SHUTDOWN

    # Wait for Redis to stop
    sleep 5

    # Copy RDB file to Redis data directory
    cp "${RDB_FILE}" /data/dump.rdb

    # Start Redis again
    echo "Starting Redis after restore..."
    redis-server /etc/redis/redis.conf

    # Cleanup
    rm -rf "${TEMP_DIR}"

    echo "Restore completed successfully"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-backup-pvc
  namespace: isa-database
  labels:
    app.kubernetes.io/name: redis-backup
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: gp3

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-backup
  namespace: isa-database
  labels:
    app.kubernetes.io/name: redis-backup
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: backup
spec:
  schedule: "0 3 * * *"  # Daily at 3 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: redis-backup
            image: redis:7-alpine
            command:
            - /bin/bash
            - -c
            - /scripts/backup.sh
            env:
            - name: REDIS_HOST
              value: "redis"
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-backup-secret
                  key: redis-password
            volumeMounts:
            - name: backup-scripts
              mountPath: /scripts
            - name: backup-storage
              mountPath: /backup
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 512Mi
          volumes:
          - name: backup-scripts
            configMap:
              name: redis-backup-config
              defaultMode: 0755
          - name: backup-storage
            persistentVolumeClaim:
              claimName: redis-backup-pvc
          restartPolicy: OnFailure