apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-retention-config
  namespace: isa-superapp
  labels:
    app.kubernetes.io/name: backup-retention
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: backup
data:
  retention-policy.json: |
    {
      "policies": {
        "database": {
          "daily": {
            "retention_days": 30,
            "pattern": "isa_superapp_*.tar.gz",
            "storage_class": "hot"
          },
          "weekly": {
            "retention_weeks": 12,
            "pattern": "isa_superapp_*_weekly.tar.gz",
            "storage_class": "cool"
          },
          "monthly": {
            "retention_months": 12,
            "pattern": "isa_superapp_*_monthly.tar.gz",
            "storage_class": "cold"
          },
          "yearly": {
            "retention_years": 7,
            "pattern": "isa_superapp_*_yearly.tar.gz",
            "storage_class": "archive"
          }
        },
        "redis": {
          "daily": {
            "retention_days": 30,
            "pattern": "isa_redis_*.tar.gz",
            "storage_class": "hot"
          },
          "weekly": {
            "retention_weeks": 12,
            "pattern": "isa_redis_*_weekly.tar.gz",
            "storage_class": "cool"
          }
        },
        "neo4j": {
          "daily": {
            "retention_days": 30,
            "pattern": "isa_neo4j_*.tar.gz",
            "storage_class": "hot"
          },
          "weekly": {
            "retention_weeks": 12,
            "pattern": "isa_neo4j_*_weekly.tar.gz",
            "storage_class": "cool"
          }
        },
        "config": {
          "daily": {
            "retention_days": 90,
            "pattern": "isa_config_*.tar.gz",
            "storage_class": "hot"
          },
          "weekly": {
            "retention_weeks": 52,
            "pattern": "isa_config_*_weekly.tar.gz",
            "storage_class": "cool"
          }
        },
        "app_data": {
          "daily": {
            "retention_days": 30,
            "pattern": "isa_app_data_*.tar.gz",
            "storage_class": "hot"
          },
          "weekly": {
            "retention_weeks": 12,
            "pattern": "isa_app_data_*_weekly.tar.gz",
            "storage_class": "cool"
          }
        }
      },
      "storage_classes": {
        "hot": {
          "description": "Frequently accessed backups",
          "access_time": "< 1 hour",
          "cost_per_gb_month": 0.023
        },
        "cool": {
          "description": "Infrequently accessed backups",
          "access_time": "< 6 hours",
          "cost_per_gb_month": 0.0125
        },
        "cold": {
          "description": "Rarely accessed backups",
          "access_time": "< 12 hours",
          "cost_per_gb_month": 0.004
        },
        "archive": {
          "description": "Long-term archival storage",
          "access_time": "< 1 hour retrieval, < 12 hours bulk",
          "cost_per_gb_month": 0.0012
        }
      },
      "compliance": {
        "gdpr": {
          "data_retention_years": 7,
          "audit_required": true
        },
        "soc2": {
          "backup_verification_required": true,
          "access_logging_required": true
        },
        "hipaa": {
          "encryption_required": true,
          "access_controls_required": true
        }
      }
    }

  cleanup.sh: |
    #!/bin/bash
    set -e

    BACKUP_DIR="/backup"
    CONFIG_FILE="/config/retention-policy.json"

    log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') - $*" >&2
    }

    # Load retention policy
    if [ ! -f "$CONFIG_FILE" ]; then
        log "ERROR: Retention policy config not found: $CONFIG_FILE"
        exit 1
    fi

    # Function to calculate age in days
    get_file_age_days() {
        local file="$1"
        local file_date
        file_date=$(stat -f "%Sm" -t "%Y-%m-%d" "$file" 2>/dev/null || stat -c "%y" "$file" 2>/dev/null | cut -d' ' -f1)
        local current_date
        current_date=$(date +%Y-%m-%d)
        echo $(( ($(date -d "$current_date" +%s) - $(date -d "$file_date" +%s)) / 86400 ))
    }

    # Function to check if file should be retained
    should_retain() {
        local file="$1"
        local policy_type="$2"
        local file_age_days
        file_age_days=$(get_file_age_days "$file")

        # Parse retention policy for this type
        local retention_days
        retention_days=$(jq -r ".policies.${policy_type}.daily.retention_days" "$CONFIG_FILE" 2>/dev/null || echo "30")

        if [ "$file_age_days" -le "$retention_days" ]; then
            return 0  # Keep
        else
            return 1  # Delete
        fi
    }

    log "Starting backup cleanup process..."

    # Process each backup type
    declare -a backup_types=("database" "redis" "neo4j" "config" "app_data")

    for backup_type in "${backup_types[@]}"; do
        log "Processing ${backup_type} backups..."

        # Find backup files for this type
        case $backup_type in
            "database")
                pattern="isa_superapp_*.tar.gz"
                ;;
            "redis")
                pattern="isa_redis_*.tar.gz"
                ;;
            "neo4j")
                pattern="isa_neo4j_*.tar.gz"
                ;;
            "config")
                pattern="isa_config_*.tar.gz"
                ;;
            "app_data")
                pattern="isa_app_data_*.tar.gz"
                ;;
        esac

        # Find and process files
        find "$BACKUP_DIR" -name "$pattern" -type f | while read -r file; do
            if ! should_retain "$file" "$backup_type"; then
                log "Deleting old backup: $file"
                rm -f "$file"

                # Also remove checksum file if it exists
                checksum_file="${file%.tar.gz}.sha256"
                if [ -f "$checksum_file" ]; then
                    rm -f "$checksum_file"
                    log "Deleted checksum file: $checksum_file"
                fi
            fi
        done
    done

    # Generate retention report
    log "Generating retention report..."
    {
        echo "Backup Retention Report - $(date)"
        echo "=================================="
        echo ""
        echo "Current backup files:"
        find "$BACKUP_DIR" -name "*.tar.gz" -type f -exec ls -lh {} \; | sort
        echo ""
        echo "Storage usage:"
        du -sh "$BACKUP_DIR"/*
        echo ""
        echo "Cleanup completed at $(date)"
    } > "${BACKUP_DIR}/retention_report_$(date +%Y%m%d).txt"

    log "Backup cleanup completed"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-retention-cleanup
  namespace: isa-superapp
  labels:
    app.kubernetes.io/name: backup-retention
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: backup
spec:
  schedule: "0 7 * * *"  # Daily at 7 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup-retention
            image: alpine:latest
            command:
            - /bin/bash
            - -c
            - /scripts/cleanup.sh
            volumeMounts:
            - name: retention-config
              mountPath: /config
            - name: backup-scripts
              mountPath: /scripts
            - name: backup-storage
              mountPath: /backup
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 200m
                memory: 256Mi
          volumes:
          - name: retention-config
            configMap:
              name: backup-retention-config
          - name: backup-scripts
            configMap:
              name: backup-retention-config
              items:
              - key: cleanup.sh
                path: cleanup.sh
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-retention-pvc
          restartPolicy: OnFailure

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-retention-pvc
  namespace: isa-superapp
  labels:
    app.kubernetes.io/name: backup-retention
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3