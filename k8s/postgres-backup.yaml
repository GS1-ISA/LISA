apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-backup-config
  namespace: isa-database
  labels:
    app.kubernetes.io/name: postgres-backup
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: backup
data:
  backup.sh: |
    #!/bin/bash
    set -e

    # Configuration
    BACKUP_DIR="/backup"
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    BACKUP_NAME="isa_superapp_${TIMESTAMP}"
    RETENTION_DAYS=30

    # Database connection details
    DB_HOST="${DB_HOST:-postgres}"
    DB_PORT="${DB_PORT:-5432}"
    DB_NAME="${DB_NAME:-isa_superapp}"
    DB_USER="${DB_USER:-isa_user}"

    echo "Starting PostgreSQL backup: ${BACKUP_NAME}"

    # Create backup directory if it doesn't exist
    mkdir -p "${BACKUP_DIR}"

    # Perform pg_dump
    PGPASSWORD="${DB_PASSWORD}" pg_dump \
      -h "${DB_HOST}" \
      -p "${DB_PORT}" \
      -U "${DB_USER}" \
      -d "${DB_NAME}" \
      -F custom \
      -Z 9 \
      -f "${BACKUP_DIR}/${BACKUP_NAME}.backup"

    # Create compressed archive
    tar -czf "${BACKUP_DIR}/${BACKUP_NAME}.tar.gz" \
      -C "${BACKUP_DIR}" \
      "${BACKUP_NAME}.backup"

    # Remove uncompressed backup
    rm "${BACKUP_DIR}/${BACKUP_NAME}.backup"

    # Calculate checksum
    sha256sum "${BACKUP_DIR}/${BACKUP_NAME}.tar.gz" > "${BACKUP_DIR}/${BACKUP_NAME}.sha256"

    echo "Backup completed: ${BACKUP_NAME}"

    # Clean up old backups
    find "${BACKUP_DIR}" -name "isa_superapp_*.tar.gz" -mtime +${RETENTION_DAYS} -delete
    find "${BACKUP_DIR}" -name "isa_superapp_*.sha256" -mtime +${RETENTION_DAYS} -delete

    echo "Cleanup completed"

  restore.sh: |
    #!/bin/bash
    set -e

    # Configuration
    BACKUP_DIR="/backup"
    DB_HOST="${DB_HOST:-postgres}"
    DB_PORT="${DB_PORT:-5432}"
    DB_NAME="${DB_NAME:-isa_superapp}"
    DB_USER="${DB_USER:-isa_user}"

    if [ -z "$1" ]; then
      echo "Usage: $0 <backup_file>"
      echo "Available backups:"
      ls -la "${BACKUP_DIR}"/isa_superapp_*.tar.gz
      exit 1
    fi

    BACKUP_FILE="$1"

    if [ ! -f "${BACKUP_DIR}/${BACKUP_FILE}" ]; then
      echo "Backup file not found: ${BACKUP_DIR}/${BACKUP_FILE}"
      exit 1
    fi

    echo "Starting PostgreSQL restore from: ${BACKUP_FILE}"

    # Verify checksum if available
    CHECKSUM_FILE="${BACKUP_DIR}/${BACKUP_FILE%.tar.gz}.sha256"
    if [ -f "${CHECKSUM_FILE}" ]; then
      echo "Verifying backup integrity..."
      cd "${BACKUP_DIR}" && sha256sum -c "${CHECKSUM_FILE}"
    fi

    # Terminate active connections to the database
    PGPASSWORD="${DB_PASSWORD}" psql \
      -h "${DB_HOST}" \
      -p "${DB_PORT}" \
      -U "${DB_USER}" \
      -d postgres \
      -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '${DB_NAME}' AND pid <> pg_backend_pid();"

    # Drop and recreate database
    PGPASSWORD="${DB_PASSWORD}" psql \
      -h "${DB_HOST}" \
      -p "${DB_PORT}" \
      -U "${DB_USER}" \
      -d postgres \
      -c "DROP DATABASE IF EXISTS ${DB_NAME};"

    PGPASSWORD="${DB_PASSWORD}" psql \
      -h "${DB_HOST}" \
      -p "${DB_PORT}" \
      -U "${DB_USER}" \
      -d postgres \
      -c "CREATE DATABASE ${DB_NAME};"

    # Extract and restore backup
    TEMP_DIR=$(mktemp -d)
    tar -xzf "${BACKUP_DIR}/${BACKUP_FILE}" -C "${TEMP_DIR}"

    BACKUP_SQL="${TEMP_DIR}/$(basename "${BACKUP_FILE}" .tar.gz).backup"

    PGPASSWORD="${DB_PASSWORD}" pg_restore \
      -h "${DB_HOST}" \
      -p "${DB_PORT}" \
      -U "${DB_USER}" \
      -d "${DB_NAME}" \
      -F custom \
      --clean \
      --if-exists \
      --create \
      "${BACKUP_SQL}"

    # Cleanup
    rm -rf "${TEMP_DIR}"

    echo "Restore completed successfully"

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-backup-secret
  namespace: isa-database
  labels:
    app.kubernetes.io/name: postgres-backup
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: backup
type: Opaque
data:
  # These should be base64 encoded
  # db-password: <base64-encoded-password>
  # aws-access-key-id: <base64-encoded-key>
  # aws-secret-access-key: <base64-encoded-secret>
  # encryption-key: <base64-encoded-key>

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-backup-pvc
  namespace: isa-database
  labels:
    app.kubernetes.io/name: postgres-backup
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: gp3

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: isa-database
  labels:
    app.kubernetes.io/name: postgres-backup
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: backup
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            command:
            - /bin/bash
            - -c
            - /scripts/backup.sh
            env:
            - name: DB_HOST
              value: "postgres"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: "isa_superapp"
            - name: DB_USER
              value: "isa_user"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-backup-secret
                  key: db-password
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-backup-secret
                  key: db-password
            volumeMounts:
            - name: backup-scripts
              mountPath: /scripts
            - name: backup-storage
              mountPath: /backup
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 512Mi
          volumes:
          - name: backup-scripts
            configMap:
              name: postgres-backup-config
              defaultMode: 0755
          - name: backup-storage
            persistentVolumeClaim:
              claimName: postgres-backup-pvc
          restartPolicy: OnFailure