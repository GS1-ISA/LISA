[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Coverage configuration
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --durations=10
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml

# Coverage settings
[coverage:run]
source = isa_superapp
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */.venv/*
    */.env/*
    setup.py
    */migrations/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\\(Protocol\\):
    @(abc\\.)?abstractmethod

[coverage:html]
directory = htmlcov

# Markers for different test types
markers =
    unit: Unit tests
    integration: Integration tests
    performance: Performance tests
    slow: Slow running tests
    flaky: Flaky tests that may fail intermittently
    requires_api: Tests that require external API access
    requires_db: Tests that require database access
    requires_redis: Tests that require Redis
    requires_chroma: Tests that require ChromaDB

# Async configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Timeout configuration
timeout = 300

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test environment variables
env =
    TESTING=true
    ENVIRONMENT=test
    LOG_LEVEL=DEBUG

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning
    error::RuntimeWarning
