name: ISA SuperApp Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  MIN_COVERAGE: 80

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run black format check
        run: |
          black --check --diff isa_superapp/ tests/ scripts/

      - name: Run isort import check
        run: |
          isort --check-only --diff isa_superapp/ tests/ scripts/

      - name: Run flake8 linting
        run: |
          flake8 isa_superapp/ tests/ scripts/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run mypy type checking
        run: |
          mypy isa_superapp/ --ignore-missing-imports

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run bandit security scan
        run: |
          bandit -r isa_superapp/ -f json -o bandit-report.json || true
          bandit -r isa_superapp/

      - name: Run safety vulnerability scan
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/ \
            --cov=isa_superapp \
            --cov-report=xml:unit-coverage.xml \
            --cov-report=html:unit-coverage-html \
            --cov-report=term \
            --cov-fail-under=${{ env.MIN_COVERAGE }} \
            -v \
            --tb=short

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./unit-coverage.xml
          flags: unit
          name: unit-tests-${{ matrix.python-version }}

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ matrix.python-version }}
          path: |
            unit-coverage.xml
            unit-coverage-html/
            .coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start test services
        run: |
          # Start any additional test services here
          echo "Starting test services..."

      - name: Run integration tests
        run: |
          pytest tests/integration/ \
            --cov=isa_superapp \
            --cov-report=xml:integration-coverage.xml \
            --cov-report=html:integration-coverage-html \
            --cov-report=term \
            --cov-fail-under=70 \
            -v \
            --tb=short \
            --timeout=300

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./integration-coverage.xml
          flags: integration
          name: integration-tests

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            integration-coverage.xml
            integration-coverage-html/
            .coverage

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run performance tests
        run: |
          pytest tests/performance/ \
            --benchmark-only \
            --benchmark-json=performance-results.json \
            --benchmark-sort=mean \
            -v

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            performance-results.json
            .benchmarks/

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan, lint-and-format]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Generate test summary
        run: |
          echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: [View Report](https://codecov.io/gh/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: [View Report](https://codecov.io/gh/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lint Check: ${{ needs.lint-and-format.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Upload combined test results
        uses: actions/upload-artifact@v4
        with:
          name: all-test-results
          path: test-results/

  docs-html:
    name: Build Docs (HTML)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install docs deps
        run: |
          python -m pip install --upgrade pip
          pip install sphinx myst-parser sphinx-rtd-theme
      - name: Build docs
        run: |
          make docs
      - name: Upload docs html
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docs-html
          path: docs/_build/html

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan, lint-and-format]
    if: always() && github.event_name == 'schedule'

    steps:
      - name: Notify on failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "Scheduled tests failed. Check the workflow logs for details."
          # Add notification logic here (Slack, email, etc.)
