name: Nightly Audit with Score Badge

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC daily

jobs:
  nightly-audit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate auditing

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pyyaml requests

      - name: Run full audit suite
        id: audit
        run: |
          echo "Running comprehensive audit suite..."

          # Run audit completeness check
          python scripts/audit_completeness.py

          # Run audit synthesis to generate scores
          python scripts/audit_synthesis.py

          # Extract current score from audit report
          if [ -f "docs/audit/audit_report.md" ]; then
            SCORE=$(grep -o "Overall Rule Confidence: [0-9.]*" docs/audit/audit_report.md | grep -o "[0-9.]*")
            echo "Current score: $SCORE"
            echo "score=$SCORE" >> $GITHUB_OUTPUT
          else
            echo "score=0.0" >> $GITHUB_OUTPUT
          fi

      - name: Load baseline scores
        id: baseline
        run: |
          # Load previous baseline if exists
          if [ -f "docs/audit/coverage_baseline.json" ]; then
            BASELINE_SCORE=$(python -c "import json; data=json.load(open('docs/audit/coverage_baseline.json')); print(data.get('coverage_pct', 0))")
            echo "baseline_score=$BASELINE_SCORE" >> $GITHUB_OUTPUT
          else
            echo "baseline_score=0.0" >> $GITHUB_OUTPUT
          fi

      - name: Calculate score delta
        id: delta
        run: |
          CURRENT="${{ steps.audit.outputs.score }}"
          BASELINE="${{ steps.baseline.outputs.baseline_score }}"

          # Calculate delta percentage
          DELTA=$(python -c "
          current = float('$CURRENT')
          baseline = float('$BASELINE')
          if baseline > 0:
              delta = abs(current - baseline) / baseline * 100
          else:
              delta = 0 if current == 0 else 100
          print(f'{delta:.1f}')
          ")

          echo "delta=$DELTA" >> $GITHUB_OUTPUT
          echo "Score delta: $DELTA%"

      - name: Update baseline if improved
        if: steps.audit.outputs.score > steps.baseline.outputs.baseline_score
        run: |
          python -c "
          import json
          score = float('${{ steps.audit.outputs.score }}')
          with open('docs/audit/coverage_baseline.json', 'w') as f:
              json.dump({'coverage_pct': score}, f, indent=2)
          "
          echo "Updated baseline score to ${{ steps.audit.outputs.score }}"

      - name: Create badge SVG
        run: |
          SCORE="${{ steps.audit.outputs.score }}"

          # Determine badge color based on score
          if (( $(echo "$SCORE >= 80" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$SCORE >= 60" | bc -l) )); then
            COLOR="yellow"
          elif (( $(echo "$SCORE >= 40" | bc -l) )); then
            COLOR="orange"
          else
            COLOR="red"
          fi

          # Create badge SVG
          cat > audit-badge.svg << 'EOF'
          <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="116" height="20">
            <linearGradient id="b" x2="0" y2="100%">
              <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
              <stop offset="1" stop-opacity=".1"/>
            </linearGradient>
            <clipPath id="a">
              <rect width="116" height="20" rx="3" fill="#fff"/>
            </clipPath>
            <g clip-path="url(#a)">
              <path fill="#555" d="M0 0h37v20H0z"/>
              <path fill="#COLOR" d="M37 0h79v20H37z"/>
              <path fill="url(#b)" d="M0 0h116v20H0z"/>
            </g>
            <g fill="#fff" text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="110">
              <text x="195" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="270">audit</text>
              <text x="195" y="140" transform="scale(.1)" textLength="270">audit</text>
              <text x="755" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="690">SCORE%</text>
              <text x="755" y="140" transform="scale(.1)" textLength="690">SCORE%</text>
            </g>
          </svg>
          EOF

          # Replace placeholders
          sed -i "s/#COLOR/$COLOR/g" audit-badge.svg
          sed -i "s/SCORE/$SCORE/g" audit-badge.svg

          echo "Created audit badge with score $SCORE and color $COLOR"

      - name: Commit badge to repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add badge and updated baseline
          git add audit-badge.svg docs/audit/coverage_baseline.json || true

          # Check if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update audit badge - Score: ${{ steps.audit.outputs.score }}%" || true
            git push || echo "Push failed, continuing..."
          fi

      - name: Create issue if score delta > 5%
        if: steps.delta.outputs.delta > 5
        uses: actions/github-script@v7
        with:
          script: |
            const score = '${{ steps.audit.outputs.score }}';
            const baseline = '${{ steps.baseline.outputs.baseline_score }}';
            const delta = '${{ steps.delta.outputs.delta }}';
            const deltaDirection = parseFloat(score) > parseFloat(baseline) ? 'improvement' : 'decline';

            const title = `ðŸš¨ Audit Score ${deltaDirection.charAt(0).toUpperCase() + deltaDirection.slice(1)} Alert - ${delta}% delta`;
            const body = `## Audit Score ${deltaDirection.charAt(0).toUpperCase() + deltaDirection.slice(1)} Detected

            **Current Score:** ${score}%
            **Previous Baseline:** ${baseline}%
            **Delta:** ${delta}% ${deltaDirection}

            ### Analysis
            The automated nightly audit has detected a significant ${deltaDirection} in the overall audit score.

            **Impact:** ${deltaDirection === 'improvement' ?
              'This represents a positive improvement in code quality and governance compliance.' :
              'This may indicate degradation in code quality or governance compliance.'}

            ### Next Steps
            ${deltaDirection === 'improvement' ?
              '- Review the improvements to understand what drove the score increase\n- Consider updating quality gates if the improvement is sustained' :
              '- Review recent changes that may have impacted audit scores\n- Check audit reports for specific areas of concern\n- Consider remediation actions if decline continues'}

            ### Audit Details
            - Run ID: ${context.runId}
            - Workflow: ${context.workflow}
            - Timestamp: ${new Date().toISOString()}

            ### Related Files
            - [Audit Report](docs/audit/audit_report.md)
            - [Remediation Plan](docs/audit/remediation_plan.md)
            - [Rule Confidence](docs/audit/rule_confidence.csv)

            ---

            *This issue was automatically created by the nightly audit workflow.*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['audit', 'automated', deltaDirection]
            });

      - name: Update README with badge
        run: |
          # Check if badge already exists in README
          if ! grep -q "audit-badge.svg" README.md; then
            # Add badge after the first header
            sed -i '1a\
            ![Audit Score](audit-badge.svg)' README.md

            git add README.md
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git commit -m "Add audit score badge to README" || true
            git push || echo "Push failed, continuing..."
          fi

      - name: Upload audit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audit-results-${{ github.run_number }}
          path: |
            docs/audit/
            audit-badge.svg
          retention-days: 30
