name: Reusable Build and Test Workflow

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.11'
      test-group:
        required: false
        type: string
        default: 'unit'
      coverage-threshold:
        required: false
        type: number
        default: 80
      skip-tests:
        required: false
        type: boolean
        default: false
    outputs:
      test-status:
        description: 'Test execution status'
        value: ${{ jobs.test.outputs.status }}
      coverage-report:
        description: 'Coverage report artifact'
        value: ${{ jobs.test.outputs.coverage-artifact }}

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ inputs.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ inputs.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run Ruff linter
        run: ruff check . --output-format=github

      - name: Run Black formatter check
        run: black --check --diff .

      - name: Run isort import checker
        run: isort --check-only --diff .

      - name: Run MyPy type checker
        run: mypy . --ignore-missing-imports || true

      - name: Set status
        id: check
        run: echo "status=passed" >> $GITHUB_OUTPUT

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [code-quality]
    if: ${{ !inputs.skip-tests }}
    outputs:
      status: ${{ steps.test.outputs.status }}
      coverage-artifact: ${{ steps.upload.outputs.artifact-id }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ inputs.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ inputs.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Determine test path
        id: test-path
        run: |
          case "${{ inputs.test-group }}" in
            "unit")
              echo "path=tests/unit" >> $GITHUB_OUTPUT
              ;;
            "integration")
              echo "path=tests/integration" >> $GITHUB_OUTPUT
              ;;
            "e2e")
              echo "path=tests/e2e" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "path=tests" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Run tests
        id: test
        run: |
          pytest ${{ steps.test-path.outputs.path }} \
            --cov=src \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-fail-under=${{ inputs.coverage-threshold }} \
            --junitxml=junit.xml \
            -n auto \
            -v
          echo "status=passed" >> $GITHUB_OUTPUT

      - name: Upload test results
        id: upload
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ inputs.test-group }}-py${{ inputs.python-version }}
          path: |
            coverage.xml
            htmlcov/
            junit.xml

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    outputs:
      package-artifact: ${{ steps.upload.outputs.artifact-id }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build package
        run: python -m build

      - name: Upload package
        id: upload
        uses: actions/upload-artifact@v3
        with:
          name: python-package-py${{ inputs.python-version }}
          path: dist/