name: Example Usage - Consolidated Workflows

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test job
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
      build_status: ${{ steps.build.outputs.status }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black mypy

      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          mypy . --ignore-missing-imports

      - name: Run tests
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_id }}
          path: |
            coverage.xml
            htmlcov/
            .coverage

      - name: Build Docker image
        id: build
        run: |
          # Generate image tag
          IMAGE_TAG="sha-${{ github.sha }}-$(date +%Y%m%d-%H%M%S)"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          
          # Build image
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} .
          
          # Tag as latest for branch
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          fi
          
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.build.outputs.image_tag }}
          
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          fi

  # Security scanning job
  security-scan:
    name: Security Scan
    needs: build-and-test
    if: needs.build-and-test.outputs.build_status == 'success'
    uses: ./.github/workflows/reusable-security-scan.yml
    with:
      scan_type: 'full'
      languages: 'python,javascript'
      severity_threshold: 'high'
      upload_results: true
    secrets:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to development
  deploy-dev:
    name: Deploy to Development
    needs: [build-and-test, security-scan]
    if: |
      github.ref == 'refs/heads/develop' && 
      needs.build-and-test.outputs.build_status == 'success' &&
      (needs.security-scan.outputs.scan_status == 'success' || needs.security-scan.outputs.scan_status == 'warning')
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      environment: 'development'
      deployment_strategy: 'rolling'
      image_tag: ${{ needs.build-and-test.outputs.image_tag }}
      namespace: 'isa-superapp-dev'
      replicas: '1'
      health_check_timeout: '180'
      enable_monitoring: true
      backup_before_deploy: false
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      KUBECONFIG_SECRET: ${{ secrets.KUBECONFIG_SECRET_DEV }}
      BACKUP_BUCKET: ${{ secrets.BACKUP_BUCKET }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      MONITORING_ENDPOINT: ${{ secrets.MONITORING_ENDPOINT }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    needs: [build-and-test, security-scan]
    if: |
      github.ref == 'refs/heads/staging' && 
      needs.build-and-test.outputs.build_status == 'success' &&
      needs.security-scan.outputs.scan_status == 'success'
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      environment: 'staging'
      deployment_strategy: 'canary'
      image_tag: ${{ needs.build-and-test.outputs.image_tag }}
      namespace: 'isa-superapp-staging'
      replicas: '2'
      health_check_timeout: '300'
      enable_monitoring: true
      backup_before_deploy: true
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      KUBECONFIG_SECRET: ${{ secrets.KUBECONFIG_SECRET_STAGING }}
      BACKUP_BUCKET: ${{ secrets.BACKUP_BUCKET }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      MONITORING_ENDPOINT: ${{ secrets.MONITORING_ENDPOINT }}

  # Deploy to production (manual approval required)
  deploy-production:
    name: Deploy to Production
    needs: [build-and-test, security-scan]
    if: |
      github.ref == 'refs/heads/main' &&
      needs.build-and-test.outputs.build_status == 'success' &&
      needs.security-scan.outputs.scan_status == 'success'
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      environment: 'production'
      deployment_strategy: 'blue-green'
      image_tag: ${{ needs.build-and-test.outputs.image_tag }}
      namespace: 'isa-superapp-prod'
      replicas: '3'
      health_check_timeout: '600'
      enable_monitoring: true
      backup_before_deploy: true
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      KUBECONFIG_SECRET: ${{ secrets.KUBECONFIG_SECRET_PROD }}
      BACKUP_BUCKET: ${{ secrets.BACKUP_BUCKET }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      MONITORING_ENDPOINT: ${{ secrets.MONITORING_ENDPOINT }}

  # Rollback job (manual trigger)
  rollback:
    name: Rollback Deployment
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment != ''
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: github-actions-rollback-${{ github.run_id }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Get latest backup
        id: get-backup
        run: |
          # Get the most recent backup for the environment
          BACKUP_PREFIX="backup-${{ github.event.inputs.environment }}"
          LATEST_BACKUP=$(aws s3 ls s3://${{ secrets.BACKUP_BUCKET }}/ | grep "${BACKUP_PREFIX}" | sort -r | head -1 | awk '{print $2}')
          
          if [ -z "${LATEST_BACKUP}" ]; then
            echo "❌ No backup found for environment: ${{ github.event.inputs.environment }}"
            exit 1
          fi
          
          echo "backup_name=${LATEST_BACKUP}" >> $GITHUB_OUTPUT
          echo "Found backup: ${LATEST_BACKUP}"

      - name: Restore from backup
        run: |
          BACKUP_NAME="${{ steps.get-backup.outputs.backup_name }}"
          echo "🔄 Rolling back to backup: ${BACKUP_NAME}"
          
          # Download backup files
          aws s3 cp s3://${{ secrets.BACKUP_BUCKET }}/${BACKUP_NAME}/deployment.yaml backup-deployment.yaml
          aws s3 cp s3://${{ secrets.BACKUP_BUCKET }}/${BACKUP_NAME}/service.yaml backup-service.yaml
          aws s3 cp s3://${{ secrets.BACKUP_BUCKET }}/${BACKUP_NAME}/configmap.yaml backup-configmap.yaml
          
          # Get kubeconfig
          aws secretsmanager get-secret-value \
            --secret-id ${{ secrets.KUBECONFIG_SECRET }} \
            --query SecretString \
            --output text > kubeconfig.yaml
          
          export KUBECONFIG=kubeconfig.yaml
          
          # Apply backup manifests
          kubectl apply -f backup-deployment.yaml
          kubectl apply -f backup-service.yaml
          kubectl apply -f backup-configmap.yaml
          
          # Wait for rollback to complete
          kubectl rollout status deployment/isa-superapp --timeout=300s
          
          echo "✅ Rollback completed successfully"

      - name: Send rollback notification
        run: |
          MESSAGE="🔄 Rollback completed for ${{ github.event.inputs.environment }}"
          MESSAGE="${MESSAGE}\nBackup used: ${{ steps.get-backup.outputs.backup_name }}"
          MESSAGE="${MESSAGE}\nTriggered by: ${{ github.actor }}"
          
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"${MESSAGE}\",\"color\":\"warning\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }} || true
          fi

  # Cleanup job
  cleanup:
    name: Cleanup
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old images
        run: |
          echo "🧹 Cleaning up old container images..."
          
          # Keep only the last 10 images
          IMAGE_COUNT=$(docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "table {{.Repository}}:{{.Tag}}" | wc -l)
          
          if [ $IMAGE_COUNT -gt 10 ]; then
            echo "Found ${IMAGE_COUNT} images, removing old ones..."
            docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "table {{.Repository}}:{{.Tag}}" | tail -n +11 | while read image; do
              docker rmi $image || true
            done
          fi

      - name: Cleanup workflow artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: test-results-${{ github.run_id }}