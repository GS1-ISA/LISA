name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-deployment
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to ECS
        id: deploy
        run: |
          # Get the latest image tag
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
          
          # Update ECS service with new image
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
            --force-new-deployment
          
          # Wait for service stability
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --services ${{ secrets.ECS_SERVICE_NAME }}
          
          # Get service URL
          SERVICE_URL=$(aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --services ${{ secrets.ECS_SERVICE_NAME }} \
            --query 'services[0].loadBalancers[0].targetGroupArn' \
            --output text)
          
          echo "url=https://${{ secrets.APPLICATION_DOMAIN }}" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Run basic health check
          curl -f https://${{ secrets.APPLICATION_DOMAIN }}/health || exit 1
          
          # Run API tests
          python scripts/smoke_tests.py --endpoint https://${{ secrets.APPLICATION_DOMAIN }}

      - name: Create deployment record
        run: |
          DEPLOYMENT_ID=$(date +%s)
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_ENV
          
          # Record deployment metadata
          cat > deployment-record.json << EOF
          {
            "deployment_id": "$DEPLOYMENT_ID",
            "commit_sha": "${{ github.sha }}",
            "image_tag": "$IMAGE_TAG",
            "environment": "${{ github.event.inputs.environment || 'production' }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "actor": "${{ github.actor }}"
          }
          EOF
          
          # Store deployment record (could be stored in S3, DynamoDB, etc.)
          echo "Deployment record created: deployment-record.json"

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy]
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-rollback
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Rollback deployment
        run: |
          # Get previous task definition
          PREVIOUS_TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --services ${{ secrets.ECS_SERVICE_NAME }} \
            --query 'services[0].deployments[?status==`ACTIVE`].taskDefinition' \
            --output text)
          
          # Rollback to previous version
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --task-definition $PREVIOUS_TASK_DEF \
            --force-new-deployment
          
          # Wait for rollback to complete
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --services ${{ secrets.ECS_SERVICE_NAME }}
          
          echo "Rollback completed successfully"

      - name: Notify rollback
        run: |
          echo "ðŸš¨ Deployment failed. Rolled back to previous version."
          echo "Deployment ID: ${{ env.deployment_id }}"
          echo "Commit: ${{ github.sha }}"