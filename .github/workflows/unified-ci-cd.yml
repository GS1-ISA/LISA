
name: Unified CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging, 'release/*', 'hotfix/*']
  pull_request:
    branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      deployment_strategy:
        description: 'Deployment strategy'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - rolling
          - blue-green
          - canary
          - recreate
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run mode'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  JAVA_VERSION: '17'
  GO_VERSION: '1.21'
  CACHE_VERSION: v1

jobs:
  # Job 1: Determine build matrix and changes
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      mobile: ${{ steps.changes.outputs.mobile }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
      documentation: ${{ steps.changes.outputs.documentation }}
      security: ${{ steps.changes.outputs.security }}
      database: ${{ steps.changes.outputs.database }}
      etl: ${{ steps.changes.outputs.etl }}
      ai: ${{ steps.changes.outputs.ai }}
      config: ${{ steps.changes.outputs.config }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'apps/web/**'
              - 'packages/ui/**'
              - '**/*.js'
              - '**/*.ts'
              - '**/*.jsx'
              - '**/*.tsx'
              - '**/*.vue'
              - '**/*.css'
              - '**/*.scss'
              - '**/package.json'
              - '**/package-lock.json'
              - '**/yarn.lock'
            backend:
              - 'backend/**'
              - 'apps/api/**'
              - 'services/**'
              - '**/*.py'
              - '**/*.java'
              - '**/*.go'
              - '**/*.rb'
              - '**/*.php'
              - '**/requirements.txt'
              - '**/pom.xml'
              - '**/go.mod'
              - '**/Gemfile'
              - '**/composer.json'
            mobile:
              - 'mobile/**'
              - 'apps/mobile/**'
              - '**/*.swift'
              - '**/*.kt'
              - '**/*.java'
              - '**/AndroidManifest.xml'
              - '**/Info.plist'
            infrastructure:
              - 'infrastructure/**'
              - 'terraform/**'
              - 'kubernetes/**'
              - 'docker/**'
              - '**/*.tf'
              - '**/*.yaml'
              - '**/*.yml'
              - '**/Dockerfile*'
              - '**/docker-compose*'
            documentation:
              - 'docs/**'
              - '**/*.md'
              - '**/*.rst'
              - '**/*.txt'
            security:
              - '.github/workflows/**'
              - 'security/**'
              - '**/*security*'
              - '**/security/**'
            database:
              - 'database/**'
              - '**/*.sql'
              - '**/migrations/**'
              - '**/schema/**'
            etl:
              - 'etl/**'
              - 'data/**'
              - '**/*etl*'
            ai:
              - 'ai/**'
              - 'ml/**'
              - '**/*.model'
              - '**/*ai*'
            config:
              - 'config/**'
              - '**/*.config.*'
              - '**/.env*'

  # Job 2: Security scanning and validation
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: changes
    if: |
      always() &&
      (needs.changes.outputs.frontend == 'true' ||
       needs.changes.outputs.backend == 'true' ||
       needs.changes.outputs.mobile == 'true' ||
       needs.changes.outputs.infrastructure == 'true' ||
       needs.changes.outputs.security == 'true' ||
       github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          timeout: '10m'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-security-scan'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json
        continue-on-error: true

      - name: Upload Snyk scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true')
        with:
          sarif_file: 'snyk-results.json'
          category: 'snyk-security-scan'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true'
        with:
          category: "security-analysis"

      - name: Docker security scan
        if: needs.changes.outputs.infrastructure == 'true'
        run: |
          # Install Docker Bench for Security
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          sudo bash docker-bench-security.sh -c container_images,container_runtime
        continue-on-error: true

      - name: Infrastructure security scan
        if: needs.changes.outputs.infrastructure == 'true'
        run: |
          # Install Checkov
          pip install checkov
          
          # Run Checkov on Terraform files
          checkov -d infrastructure/terraform/ --framework terraform --output json --output-file checkov-results.json
          
          # Run Checkov on Kubernetes manifests
          checkov -d kubernetes/ --framework kubernetes --output json --output-file checkov-k8s-results.json
        continue-on-error: true

  # Job 3: Build and test frontend
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    needs: [changes, security-scan]
    if: |
      always() &&
      (needs.changes.outputs.frontend == 'true' || 
       github.event_name == 'workflow_dispatch') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            apps/web/package-lock.json
            package-lock.json

      - name: Install dependencies
        run: |
          if [ -f "frontend/package.json" ]; then
            cd frontend && npm ci
          elif [ -f "apps/web/package.json" ]; then
            cd apps/web && npm ci
          elif [ -f "package.json" ]; then
            npm ci
          fi

      - name: Run linting
        run: |
          if [ -f "frontend/package.json" ]; then
            cd frontend && npm run lint
          elif [ -f "apps/web/package.json" ]; then
            cd apps/web && npm run lint
          elif [ -f "package.json" ]; then
            npm run lint
          fi
        continue-on-error: true

      - name: Run unit tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          if [ -f "frontend/package.json" ]; then
            cd frontend && npm test -- --coverage --watchAll=false
          elif [ -f "apps/web/package.json" ]; then
            cd apps/web && npm test -- --coverage --watchAll=false
          elif [ -f "package.json" ]; then
            npm test -- --coverage --watchAll=false
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Build frontend
        run: |
          if [ -f "frontend/package.json" ]; then
            cd frontend && npm run build
          elif [ -f "apps/web/package.json" ]; then
            cd apps/web && npm run build
          elif [ -f "package.json" ]; then
            npm run build
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ matrix.node-version }}
          path: |
            frontend/dist/
            frontend/build/
            apps/web/dist/
            apps/web/build/
            dist/
            build/
          retention-days: 7

  # Job 4: Build and test backend
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    needs: [changes, security-scan]
    if: |
      always() &&
      (needs.changes.outputs.backend == 'true' || 
       needs.changes.outputs.database == 'true' ||
       needs.changes.outputs.etl == 'true' ||
       needs.changes.outputs.ai == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    strategy:
      matrix:
        include:
          - language: python
            version: '3.11'
            setup: 'python'
            requirements: 'requirements.txt'
            test_cmd: 'pytest --cov=. --cov-report=xml'
            build_cmd: 'python setup.py build'
          - language: java
            version: '17'
            setup: 'java'
            requirements: 'pom.xml'
            test_cmd: 'mvn test'
            build_cmd: 'mvn package'
          - language: go
            version: '1.21'
            setup: 'go'
            requirements: 'go.mod'
            test_cmd: 'go test -v ./...'
            build_cmd: 'go build ./...'
          - language: node
            version: '18'
            setup: 'node'
            requirements: 'package.json'
            test_cmd: 'npm test'
            build_cmd: 'npm run build'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup ${{ matrix.language }}
        uses: actions/setup-node@v4
        if: matrix.language == 'node'
        with:
          node-version: ${{ matrix.version }}
      
      - name: Setup ${{ matrix.language }}
        uses: actions/setup-python@v5
        if: matrix.language == 'python'
        with:
          python-version: ${{ matrix.version }}
      
      - name: Setup ${{ matrix.language }}
        uses: actions/setup-java@v4
        if: matrix.language == 'java'
        with:
          java-version: ${{ matrix.version }}
      
      - name: Setup ${{ matrix.language }}
        uses: actions/setup-go@v5
        if: matrix.language == 'go'
        with:
          go-version: ${{ matrix.version }}
          cache: ${{ matrix.setup }}
          cache-dependency-path: |
            backend/${{ matrix.requirements }}
            services/${{ matrix.requirements }}
            ${{ matrix.requirements }}

      - name: Install dependencies
        run: |
          case "${{ matrix.language }}" in
            python)
              pip install -r requirements.txt
              pip install pytest pytest-cov
              ;;
            java)
              mvn dependency:resolve
              ;;
            go)
              go mod download
              ;;
            node)
              npm ci
              ;;
          esac

      - name: Run linting
        run: |
          case "${{ matrix.language }}" in
            python)
              pip install flake8 black
              flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
              black --check .
              ;;
            java)
              mvn checkstyle:check
              ;;
            go)
              go fmt ./...
              ;;
            node)
              npm run lint
              ;;
          esac
        continue-on-error: true

      - name: Run unit tests
        if: github.event.inputs.skip_tests != 'true'
        run: ${{ matrix.test_cmd }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: backend-${{ matrix.language }}
          name: backend-${{ matrix.language }}-coverage
          fail_ci_if_error: false

      - name: Build backend
        run: ${{ matrix.build_cmd }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ matrix.language }}
          path: |
            target/
            build/
            dist/
            *.jar
            *.war
            *.exe
          retention-days: 7

  # Job 5: Build and test mobile
  mobile:
    name: Mobile Build & Test
    runs-on: ${{ matrix.os }}
    needs: [changes, security-scan]
    if: |
      always() &&
      (needs.changes.outputs.mobile == 'true' || 
       github.event_name == 'workflow_dispatch') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    strategy:
      matrix:
        include:
          - platform: ios
            os: macos-latest
            build_cmd: 'xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release'
            test_cmd: 'xcodebuild test -workspace ios/Runner.xcworkspace -scheme Runner -destination "platform=iOS Simulator,name=iPhone 14"'
          - platform: android
            os: ubuntu-latest
            build_cmd: './gradlew assembleRelease'
            test_cmd: './gradlew test'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup mobile environment
        run: |
          if [ "${{ matrix.platform }}" = "ios" ]; then
            # Setup iOS development environment
            sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
            sudo xcodebuild -license accept
          elif [ "${{ matrix.platform }}" = "android" ]; then
            # Setup Android development environment
            echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
            echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          fi

      - name: Install dependencies
        run: |
          if [ -f "mobile/pubspec.yaml" ]; then
            flutter pub get
          elif [ -f "apps/mobile/pubspec.yaml" ]; then
            cd apps/mobile && flutter pub get
          elif [ -f "package.json" ]; then
            npm ci
          fi

      - name: Run tests
        if: github.event.inputs.skip_tests != 'true'
        run: ${{ matrix.test_cmd }}

      - name: Build mobile app
        run: ${{ matrix.build_cmd }}

      - name: Upload mobile artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mobile-build-${{ matrix.platform }}
          path: |
            build/
            ios/build/
            android/app/build/outputs/
            *.ipa
            *.apk
            *.aab
          retention-days: 7

  # Job 6: Infrastructure validation
  infrastructure:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    needs: [changes, security-scan]
    if: |
      always() &&
      (needs.changes.outputs.infrastructure == 'true' || 
       github.event_name == 'workflow_dispatch') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.0'

      - name: Terraform Format Check
        run: |
          terraform fmt -check -recursive infrastructure/terraform/
        continue-on-error: true

      - name: Terraform Init
        run: |
          terraform init -backend=false infrastructure/terraform/

      - name: Terraform Validate
        run: |
          terraform validate infrastructure/terraform/

      - name: Terraform Plan
        run: |
          terraform plan -detailed-exitcode infrastructure/terraform/
        continue-on-error: true

      - name: Validate Kubernetes manifests
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Validate Kubernetes YAML files
          find kubernetes/ -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Validating $file"
            kubectl apply --dry-run=client -f "$file" || echo "Validation failed for $file"
          done
        continue-on-error: true

      - name: Validate Docker files
        run: |
          # Install hadolint
          wget -O /tmp/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x /tmp/hadolint
          
          # Lint Dockerfiles
          find . -name "Dockerfile*" -type f | while read dockerfile; do
            echo "Linting $dockerfile"
            /tmp/hadolint "$dockerfile" || echo "Linting failed for $dockerfile"
          done
        continue-on-error: true

  # Job 7: Build and push Docker images
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [frontend, backend, mobile, infrastructure]
    if: |
      always() &&
      (needs.frontend.result == 'success' || 
       needs.backend.result == 'success' || 
       needs.mobile.result == 'success' || 
       needs.infrastructure.result == 'success' ||
       github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=stable,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Sign container image
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.0'
        continue-on-error: true

      - name: Sign the published Docker image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        continue-on-error: true

  # Job 8: Integration testing
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: |
      always() &&
      needs.docker-build.result == 'success' &&
      github.event.inputs.skip_tests != 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          # Install test dependencies
          pip install pytest pytest-docker requests
          
          # Start test services
          docker-compose -f docker-compose.test.yml up -d
          
          # Wait for services to be ready
          sleep 30

      - name: Run integration tests
        run: |
          # Run integration tests
          pytest tests/integration/ -v --tb=short
        continue-on-error: true

      - name: Run API tests
        run: |
          # Run API tests
          pytest tests/api/ -v --tb=short
        continue-on-error: true

      - name: Cleanup test environment
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down
          docker system prune -f

  # Job 9: Performance testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: |
      always() &&
      needs.docker-build.result == 'success' &&
      github.event.inputs.skip_tests != 'true' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup performance testing
        run: |
          # Install k6
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          # Run performance tests
          k6 run --out json=performance-results.json tests/performance/load-test.js
        continue-on-error: true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: performance-results.json
          retention-days: 30

  # Job 10: Deployment to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests]
    if: |
      always() &&
      (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped') &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch') &&
      (github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'production' || github.event.inputs.environment == 'auto' || github.event.inputs.environment == '')
    environment: "staging"
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-deployment
          aws-region: us-east-1

      - name: Deploy to staging
        run: |
          # Deploy to staging environment
          ./scripts/deploy-with-gating.sh \
            --environment staging \
            --strategy ${{ github.event.inputs.deployment_strategy != 'auto' && github.event.inputs.deployment_strategy || 'blue-green' }} \
            --config config/deployment-config.yaml \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            ${{ github.event.inputs.dry_run == 'true' && '--dry-run' || '' }}

      - name: Run staging health checks
        run: |
          # Wait for deployment to stabilize
          sleep 60
          
          # Run health checks
          curl -f https://staging.example.com/health || exit 1
          curl -f https://staging.example.com/health/ready || exit 1

      - name: Run staging smoke tests
        run: |
          # Run smoke tests on staging
          pytest tests/smoke/ -v --tb=short --base-url=https://staging.example.com
        continue-on-error: true

  # Job 11: Deployment approval gate
  approval-gate:
    name: Production Approval Gate
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: |
      always() &&
      needs.deploy-staging.result == 'success' &&
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') &&
      (github.event.inputs.environment == 'production' || github.event.inputs.environment == 'auto')
    environment: production-approval
    steps:
      - name: Await approval
        run: |
          echo "Deployment to production requires manual approval"
          echo "Please review the staging deployment and approve if ready"
          echo "Staging URL: https://staging.example.com"
          echo "Deployment logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  # Job 12: Deployment to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [approval-gate]
    if: |
      always() &&
      needs.approval-gate.result == 'success' &&
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') &&
      (github.event.inputs.environment == 'production' || github.event.inputs.environment == 'auto')
    environment: "production"
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-deployment
          aws-region: us-east-1

      - name: Deploy to production
        run: |
          # Deploy to production environment
          ./scripts/deploy-with-gating.sh \
            --environment production \
            --strategy ${{ github.event.inputs.deployment_strategy != 'auto' && github.event.inputs.deployment_strategy || 'canary' }} \
            --config config/deployment-config.yaml \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            ${{ github.event.inputs.dry_run == 'true' && '--dry-run' || '' }}

      - name: Run production health checks
        run: |
          # Wait for deployment to stabilize
          sleep 120
          
          # Run health checks
          curl -f https://app.example.com/health || exit 1
          curl -f https://app.example.com/health/ready || exit 1
          curl -f https://app.example.com/health/live || exit 1

      - name: Run production smoke tests
        run: |
          # Run smoke tests on production
          pytest tests/smoke/ -v --tb=short --base-url=https://app.example.com
        continue-on-error: true

      - name: Monitor deployment
        run: |
          # Monitor deployment for 10 minutes
          timeout 600 bash -c 'until curl -f https://app.example.com/health; do sleep 30; done'

  # Job 13: Post-deployment tasks
  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Send deployment notifications
        run: |
          # Send deployment notifications
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"🚀 Deployment completed successfully!